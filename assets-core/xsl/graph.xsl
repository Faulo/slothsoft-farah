<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0"	xmlns="http://www.w3.org/2000/svg"	xmlns:xlink="http://www.w3.org/1999/xlink"	xmlns:html="http://www.w3.org/1999/xhtml"	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">		<!--	<xsl:template match="/">		<html:html>			<html:style><![CDATA[.graph .graph-axes path {	stroke: black;}			]]></html:style>			<html:body style="background: silver">				<xsl:apply-templates select="*"/>			</html:body>		</html:html>	</xsl:template>	-->	<xsl:template match="graph">		<xsl:variable name="scaleX" select="number(@scaleX)"/>		<xsl:variable name="scaleY" select="number(@scaleY)"/>				<xsl:variable name="minX" select="number(xAxis/@min)"/>		<xsl:variable name="maxX" select="number(xAxis/@max)"/>		<xsl:variable name="minY" select="number(yAxis/@min)"/>		<xsl:variable name="maxY" select="number(yAxis/@max)"/>				<xsl:variable name="paddingTop" select="number(concat('0', @padding-top))"/>		<xsl:variable name="paddingRight" select="number(concat('0', @padding-right))"/>		<xsl:variable name="paddingBottom" select="number(concat('0', @padding-bottom))"/>		<xsl:variable name="paddingLeft" select="number(concat('0', @padding-left))"/>				<xsl:variable name="width" select="round(($maxX - $minX) * $scaleX + $paddingLeft + $paddingRight)"/>		<xsl:variable name="height" select="round(($maxY - $minY) * $scaleY + $paddingTop + $paddingBottom)"/>				<xsl:variable name="valueList" select="value"/>				<svg version="1.1"			contentScriptType="application/javascript"			contentStyleType="text/css"			color-rendering="optimizeQuality"			image-rendering="optimizeQuality"			text-rendering="optimizeLegibility"			shape-rendering="geometricPrecision"			viewBox="0 0 {$width} {$height}"			style="width: {$width}px; height: {$height}px"			class="graph"			>			<xsl:if test="string-length(@title)">				<title><xsl:value-of select="@title"/></title>			</xsl:if>			<xsl:if test="string-length(style)">				<style><xsl:copy-of select="style/text()"/></style>			</xsl:if>			<g transform="translate({- $minX * $scaleX + $paddingLeft}, {$maxY * $scaleY + $paddingTop}) scale(1, -1)">				<xsl:apply-templates select="valueList">					<xsl:with-param name="scaleX" select="$scaleX"/>					<xsl:with-param name="scaleY" select="$scaleY"/>				</xsl:apply-templates>				<g class="graph-axes">					<xsl:apply-templates select="xAxis">						<xsl:with-param name="scaleX" select="$scaleX"/>						<xsl:with-param name="scaleY" select="$scaleY"/>					</xsl:apply-templates>					<xsl:apply-templates select="yAxis">						<xsl:with-param name="scaleX" select="$scaleX"/>						<xsl:with-param name="scaleY" select="$scaleY"/>					</xsl:apply-templates>				</g>				<xsl:apply-templates select="captionList">					<xsl:with-param name="scaleX" select="$scaleX"/>					<xsl:with-param name="scaleY" select="$scaleY"/>				</xsl:apply-templates>			</g>		</svg>	</xsl:template>		<xsl:template match="captionList">		<xsl:param name="scaleX" select="1"/>		<xsl:param name="scaleY" select="1"/>		<g class="graph-captions {@class}">			<xsl:for-each select="caption">				<xsl:variable name="x" select="round(@x * $scaleX)"/>				<xsl:variable name="y" select="round(@y * $scaleY)"/>				<text transform="translate({$x}, {$y}) scale(1, -1)">					<xsl:if test="@class">						<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>					</xsl:if>					<xsl:choose>						<xsl:when test="@href">							<a href="{@href}" target="_blank">								<xsl:value-of select="."/>							</a>						</xsl:when>						<xsl:otherwise>								<xsl:value-of select="."/>						</xsl:otherwise>					</xsl:choose>				</text>			</xsl:for-each>		</g>	</xsl:template>		<xsl:template match="valueList">		<xsl:param name="scaleX" select="1"/>		<xsl:param name="scaleY" select="1"/>		<g class="graph-values {@class}">			<xsl:for-each select="value">				<xsl:variable name="x" select="round(@x * $scaleX)"/>				<xsl:variable name="y" select="round(@y * $scaleY)"/>				<rect x="{$x}" width="{$scaleX}">					<xsl:if test="@class">						<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>					</xsl:if>					<xsl:if test="@style">						<xsl:attribute name="style"><xsl:value-of select="@style"/></xsl:attribute>					</xsl:if>					<xsl:choose>						<xsl:when test="$y &gt; 0">							<xsl:attribute name="y"><xsl:value-of select="0"/></xsl:attribute>							<xsl:attribute name="height"><xsl:value-of select="$y"/></xsl:attribute>						</xsl:when>						<xsl:when test="$y &lt; 0">							<xsl:attribute name="y"><xsl:value-of select="$y"/></xsl:attribute>							<xsl:attribute name="height"><xsl:value-of select="-$y"/></xsl:attribute>						</xsl:when>					</xsl:choose>				</rect>				<xsl:if test="@label">					<text transform="translate({$x + $scaleX div 2}, {$scaleY div 2}) scale(1, -1) rotate(270)" text-anchor="left" dominant-baseline="middle">						<xsl:value-of select="@label"/>					</text>				</xsl:if>			</xsl:for-each>		</g>		<!--		<path color="green">			<xsl:attribute name="d">				<xsl:for-each select="value">					<xsl:variable name="pos" select="position()"/>					<xsl:choose>						<xsl:when test="position() = 1">							<xsl:text>M</xsl:text>						</xsl:when>						<xsl:otherwise>							<xsl:text> L</xsl:text>						</xsl:otherwise>					</xsl:choose>					<xsl:value-of select="round(@x * $scaleX)"/>					<xsl:text>,</xsl:text>					<xsl:value-of select="0"/>										<xsl:text> L</xsl:text>					<xsl:value-of select="round(@x * $scaleX)"/>					<xsl:text>,</xsl:text>					<xsl:value-of select="round(@y * $scaleY)"/>										<xsl:text> L</xsl:text>					<xsl:value-of select="round((@x + 1) * $scaleX)"/>					<xsl:text>,</xsl:text>					<xsl:value-of select="round(@y * $scaleY)"/>										<xsl:text> L</xsl:text>					<xsl:value-of select="round((@x + 1) * $scaleX)"/>					<xsl:text>,</xsl:text>					<xsl:value-of select="0"/>										<xsl:choose>						<xsl:when test="position() = last()">							<xsl:text> Z</xsl:text>						</xsl:when>						<xsl:otherwise>						</xsl:otherwise>					</xsl:choose>				</xsl:for-each>			</xsl:attribute>		</path>		-->	</xsl:template>		<xsl:template match="xAxis">		<xsl:param name="scaleX" select="1"/>		<xsl:param name="scaleY" select="1"/>				<xsl:variable name="size" select="number(@size)"/>		<path d="M{@min * $scaleX},0 H{@max * $scaleX}"/>		<xsl:for-each select="label">			<g transform="translate({@position * $scaleX}, 0)">				<path d="M0,{$size div -2} v{$size}"/>				<xsl:if test="string-length(.)">					<text y="{$size * 0.75}" transform="scale(1, -1)" text-anchor="middle" dominant-baseline="hanging">						<xsl:value-of select="."/>					</text>				</xsl:if>			</g>		</xsl:for-each>	</xsl:template>		<xsl:template match="yAxis">		<xsl:param name="scaleX" select="1"/>		<xsl:param name="scaleY" select="1"/>				<xsl:variable name="size" select="number(@size)"/>		<path d="M0,{@min * $scaleY} V{@max * $scaleY}"/>		<xsl:for-each select="label">			<g transform="translate(0, {@position * $scaleY})">				<path d="M{$size div -2},0 h{$size}"/>				<xsl:if test="string-length(.)">					<text x="{$size * -0.75}" transform="scale(1, -1)" text-anchor="end" dominant-baseline="central">						<xsl:value-of select="."/>					</text>				</xsl:if>			</g>		</xsl:for-each>	</xsl:template></xsl:stylesheet>